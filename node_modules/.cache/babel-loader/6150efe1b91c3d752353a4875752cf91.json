{"ast":null,"code":"var _jsxFileName = \"/Users/alexwilson/Documents/CSCI426/log-in/User-Login/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  /* This block of code runs after every component evaluation\n      AND only if dependencies change \n      useEffect has 2 parameters, code of block to be run and array of dependencies\n  */\n\n  useEffect(() => {\n    /* variable to check if user is logged in previously */\n    const storedUserLoggedInfo = localStorage.getItem('isLoggedIn');\n    /* check local storage if the user was logged in */\n\n    if (storedUserLoggedInfo === '1') {\n      /* set the user to logged in */\n      setIsLoggedIn(true);\n    }\n  }, []);\n  /* function to handle when a user logs out */\n\n  const logoutHandler = () => {\n    // remove user credentials from local storage \n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n  /* function to handle when a user logs in */\n\n\n  const loginHandler = () => {\n    // store user credentials into local storage \n    // 1 -> logged in, 0 -> not logged in\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/alexwilson/Documents/CSCI426/log-in/User-Login/src/store/auth-context.js"],"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInfo","localStorage","getItem","logoutHandler","removeItem","loginHandler","setItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACpCC,EAAAA,UAAU,EAAE,KADwB;AAEpCC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFkB;AAGpCC,EAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE;AAHI,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAE1C,QAAM,CAACN,UAAD,EAAaO,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;AAEA;AACJ;AACA;AACA;;AACIC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMW,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA7B;AAEA;;AACA,QAAGF,oBAAoB,KAAK,GAA5B,EACA;AACA;AACAD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACC;AACJ,GAVQ,EAUN,EAVM,CAAT;AAYA;;AACA,QAAMI,aAAa,GAAG,MAAM;AACxB;AACAF,IAAAA,YAAY,CAACG,UAAb,CAAwB,YAAxB;AACAL,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAJD;AAMA;;;AACA,QAAMM,YAAY,GAAG,MAAM;AACvB;AACA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GALD;;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACP,MAAAA,UAAU,EAAEA,UAAb;AAAyBC,MAAAA,QAAQ,EAAEU,aAAnC;AAAkDT,MAAAA,OAAO,EAAEW;AAA3D,KAA7B;AAAA,cACEP,KAAK,CAACS;AADR;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAtCM;;GAAMV,mB;;KAAAA,mB;AAuCb,eAAeP,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst AuthContext = React.createContext({\n    isLoggedIn: false,\n    onLogout: () => {},\n    onLogin: (email, password) => {}\n});\n\nexport const AuthContextProvider = (props) => {\n\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    /* This block of code runs after every component evaluation\n        AND only if dependencies change \n        useEffect has 2 parameters, code of block to be run and array of dependencies\n    */\n    useEffect(() => {\n        /* variable to check if user is logged in previously */\n        const storedUserLoggedInfo = localStorage.getItem('isLoggedIn');\n\n        /* check local storage if the user was logged in */\n        if(storedUserLoggedInfo === '1')\n        {\n        /* set the user to logged in */\n        setIsLoggedIn(true);\n        }\n    }, []);\n\n    /* function to handle when a user logs out */\n    const logoutHandler = () => {\n        // remove user credentials from local storage \n        localStorage.removeItem('isLoggedIn');\n        setIsLoggedIn(false);\n    };\n\n    /* function to handle when a user logs in */\n    const loginHandler = () => {\n        // store user credentials into local storage \n        // 1 -> logged in, 0 -> not logged in\n        localStorage.setItem('isLoggedIn', '1');\n        setIsLoggedIn(true);\n    };\n\n    return <AuthContext.Provider value={{isLoggedIn: isLoggedIn, onLogout: logoutHandler, onLogin: loginHandler}}>\n            {props.children}\n        </AuthContext.Provider>;\n}\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}